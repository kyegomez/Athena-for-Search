/* eslint-disable react-hooks/exhaustive-deps */
import { SearchQuery } from "@/types";
import { IconReload } from "@tabler/icons-react";
import { useState } from "react";
import { useEffect } from "react";
import { FC } from "react";


interface AnswerProps {
  searchQuery: SearchQuery;
  answer: string;
  done: boolean;
  onReset: () => void;
  sources: string[]
  // onSubmit: (handleSave)
}
// searchQuery.query, answer, searchQuery.sourceLinks
// query: string, answer: string, sources: string[]
// type AnswerComponent = (
//   { searchQuery, answer, done, onReset }: AnswerProps
// ) => Promise<JSX.Element>;

export const Answer: FC<AnswerProps> = ({ searchQuery, answer, done, onReset }) => {
  const query: any = searchQuery.query;
  // const answer: any = answer;
  const sources: any = searchQuery.sourceLinks

  // const handleSave = async () => {
  //   try {
  //     const res = await fetch('/api/help', {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({query, answer, sources})
  //     });
  
  //     if (res.ok) {
  //       console.log("Document inserted successfully");
  //     } else {
  //       console.log("Failed to insert document");
  //     }
  //   } catch (error) {
  //     console.log(`Error inserting document: ${error}`);
  //   }
  // };

  // useEffect(() => {
  //   const handleSave = async () => {
  //     try {
  //       const res = await fetch('/api/help', {
  //         method: "POST",
  //         headers: {
  //           "Content-Type": "application/json",
  //         },
  //         body: JSON.stringify({query, answer: athenaResponse, sources})
  //       });

  //       if (res.ok) {
  //         console.log("Document inserted successfully");
  //       } else {
  //         console.log("Failed to insert document");
  //       }
  //     } catch (error) {
  //       console.log(`Error inserting document: ${error}`);
  //     }
  //   };

  //   handleSave();
  // }, [query, athenaResponse, sources]);

  // const handleResetAndSave = () => {
  //   onReset();
  //   handleSave();
  // };
  const handleSave = async () => {
    try {
      const res = await fetch('/api/help', {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({query, answer, sources})
      });
  
      if (res.ok) {
        console.log("Document inserted successfully");
      } else {
        console.log("Failed to insert document");
      }
      let responseBody: any = "";
      if (res.ok) {
        if (res.headers.get("Content-Type")?.includes("application/json")) {
          responseBody = await res.json();
        } else {
          responseBody = await res.text();
        }
      } else {
        console.log("Failed to insert document");
      }
      
      if (typeof responseBody === "object" && responseBody.error) {
        throw new Error(`Server error: ${responseBody.error}`);
      }
    } catch (error) {
      console.log(`Error inserting document: ${error}`);
    }
  // useEffect(() => {
  //   handleSave();
  // }, [query, answer, sources]);

  const handleResetAndSave = () => {
    onReset();
    handleSave();
  };



    return (
      <div className="max-w-[800px] space-y-4 py-16 px-8 sm:px-24 sm:pt-16 pb-32">
        <div className="overflow-auto text-2xl sm:text-4xl">{searchQuery.query}</div>

        <div className="border-b border-zinc-800 pb-4">
          <div className="text-md text-blue-500">Answer</div>

          <div className="mt-2 overflow-auto">{replaceSourcesWithLinks(answer, searchQuery.sourceLinks)}</div>
        </div>

        {done && (
          <>
            <div className="border-b border-zinc-800 pb-4">
              <div className="text-md text-blue-500">Sources</div>

              {searchQuery.sourceLinks.map((source, index) => (
                <div
                  key={index}
                  className="mt-1 overflow-auto"
                >
                  {`[${index + 1}] `}
                  <a
                    className="hover:cursor-pointer hover:underline"
                    target="_blank"
                    rel="noopener noreferrer"
                    href={source}
                  >
                    {source.split("//")[1].split("/")[0].replace("www.", "")}
                  </a>
                </div>
              ))}
            </div>

            <button
              className="flex h-10 w-52 items-center justify-center rounded-full bg-blue-500 p-2 hover:cursor-pointer hover:bg-blue-600"
              onClick={handleResetAndSave}
            >
              <IconReload size={18} />
              <div className="ml-2">Ask New Question</div>
            </button>
          </>
        )}
      </div>
    );
  };

  const replaceSourcesWithLinks = (answer: string, sourceLinks: string[]) => {
    const elements = answer.split(/(\[[0-9]+\])/).map((part, index) => {
      if (/\[[0-9]+\]/.test(part)) {
        const link = sourceLinks[parseInt(part.replace(/[\[\]]/g, "")) - 1];

        return (
          <a
            key={index}
            className="hover:cursor-pointer text-blue-500"
            href={link}
            target="_blank"
            rel="noopener noreferrer"
          >
            {part}
          </a>
        );
      } else {
        return part;
      }
    });

    return elements;
  };
  // function setInsertData(data: any) {
  //   throw new Error("Function not implemented.");
  // }
}








// const handleSave = async () => {
  //   try {
  //     const res = await fetch('/api/help', {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({query, answer, sources})
  //     });
  
  //     if (res.ok) {
  //       console.log("Document inserted successfully");
  //     } else {
  //       console.log("Failed to insert document");
  //     }
  //   } catch (error) {
  //     console.log(`Error inserting document: ${error}`);
  //   }
  // };

  // useEffect(() => {
  //   const handleSave = async () => {
  //     try {
  //       const res = await fetch('/api/help', {
  //         method: "POST",
  //         headers: {
  //           "Content-Type": "application/json",
  //         },
  //         body: JSON.stringify({query, answer: athenaResponse, sources})
  //       });

  //       if (res.ok) {
  //         console.log("Document inserted successfully");
  //       } else {
  //         console.log("Failed to insert document");
  //       }
  //     } catch (error) {
  //       console.log(`Error inserting document: ${error}`);
  //     }
  //   };

  //   handleSave();
  // }, [query, athenaResponse, sources]);

  // const handleResetAndSave = () => {
  //   onReset();
  //   handleSave();
  // };







    // useEffect(() => {
  //   handleSave();
  // }, [query, answer, sources]);




  // searchQuery.query, answer, searchQuery.sourceLinks
// query: string, answer: string, sources: string[]
// type AnswerComponent = (
//   { searchQuery, answer, done, onReset }: AnswerProps
// ) => Promise<JSX.Element>;
